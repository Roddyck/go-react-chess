// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: games.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (
    id, board, turn, history, players
) values (
    gen_random_uuid(), $1, $2, $3, $4
)
RETURNING id, board, turn, history, players
`

type CreateGameParams struct {
	Board   json.RawMessage
	Turn    string
	History json.RawMessage
	Players json.RawMessage
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.Board,
		arg.Turn,
		arg.History,
		arg.Players,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Board,
		&i.Turn,
		&i.History,
		&i.Players,
	)
	return i, err
}

const getGameByID = `-- name: GetGameByID :one
SELECT id, board, turn, history, players FROM games
WHERE id = $1
`

func (q *Queries) GetGameByID(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameByID, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Board,
		&i.Turn,
		&i.History,
		&i.Players,
	)
	return i, err
}

const updateGame = `-- name: UpdateGame :exec
UPDATE games
    SET board = $2,
    turn = $3,
    history = $4,
    players = $5
WHERE id = $1
`

type UpdateGameParams struct {
	ID      uuid.UUID
	Board   json.RawMessage
	Turn    string
	History json.RawMessage
	Players json.RawMessage
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.db.ExecContext(ctx, updateGame,
		arg.ID,
		arg.Board,
		arg.Turn,
		arg.History,
		arg.Players,
	)
	return err
}
